# # This is a GitHub Actions workflow file that integrates Snyk security scans.
# # It includes jobs for Snyk Code, Snyk Open Source, Snyk Container, and Snyk IaC.
# name: Snyk Security Scans

# # This workflow is triggered on every push to the main branch and on every pull request.
# on:
#   push:
#     branches: ["main"]
#   pull_request:
#     branches: ["main"]

# jobs:
#   # This job runs Snyk's Static Application Security Testing (SAST) to find and fix
#   # vulnerabilities in your application code.
#   snyk_code:
#     runs-on: ubuntu-latest
#     steps:
#       # This step checks out your repository's code so that the workflow can access it.
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       # This step installs the Snyk CLI into the runner environment.
#       - name: Set up Snyk CLI
#         uses: snyk/actions/setup@master

#       # This step runs the Snyk Code scan using the installed CLI.
#       - name: Run Snyk Code analysis
#         run: snyk code test
#         continue-on-error: true # To prevent the workflow from failing on vulnerabilities
#         env:
#           # Your Snyk token is required to authenticate with the Snyk API.
#           # Store your token as a secret in your GitHub repository settings.
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

#   # This job runs Snyk's Software Composition Analysis (SCA) to find and fix
#   # vulnerabilities in your open-source dependencies.
#   snyk_open_source:
#     runs-on: ubuntu-latest
#     steps:
#       # This step checks out your repository's code.
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       # This step sets up a Python environment.
#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.11'

#       # This step installs the project dependencies from your requirements.txt file.
#       - name: Install dependencies
#         run: pip install -r requirements.txt

#       # This step runs the Snyk Open Source scan using the dedicated Python action.
#       - name: Run Snyk Open Source
#         uses: snyk/actions/python@master
#         continue-on-error: true # To prevent the workflow from failing on vulnerabilities
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#         with:
#           # The 'test' command provides immediate feedback in the CI log.
#           command: test
#           args: --all-projects --sarif-file-output=snyk-open-source.sarif
      
#       - name: Monitor project on Snyk
#         uses: snyk/actions/python@master
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#         with:
#           # The 'monitor' command populates the Snyk dashboard.
#           command: monitor
#           args: --all-projects
  
#   # This job runs Snyk Container to find and fix vulnerabilities in your Docker image.
#   snyk_container:
#     runs-on: ubuntu-latest
#     steps:
#       # This step checks out your repository's code.
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       # This step builds the Docker image from the repository root.
#       - name: Build Docker image
#         run: docker build . --file ./dockerfiles/Dockerfile --tag fastapi-app

#       # This step runs the Snyk Container scan.
#       - name: Run Snyk Container scan
#         uses: snyk/actions/docker@master
#         continue-on-error: true # To prevent the workflow from failing on vulnerabilities
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#         with:
#           # The name of the image to test.
#           image: fastapi-app
#           # Arguments to pass to the Snyk CLI, pointing to the Dockerfile.
#           args: --file=./dockerfiles/Dockerfile

#   # This job runs Snyk Infrastructure as Code (IaC) to find and fix
#   # misconfigurations in your IaC files (e.g., Terraform, Kubernetes).
#   snyk_iac:
#     runs-on: ubuntu-latest
#     steps:
#       # This step checks out your repository's code.
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       # This step runs the Snyk IaC scan.
#       - name: Run Snyk IaC
#         uses: snyk/actions/iac@master
#         continue-on-error: true # To prevent the workflow from failing on vulnerabilities
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}


name: For Python using Snyk
on: push
jobs:
  package-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
            #command : code test 
            args: --sarif-file-output=packages.sarif
      - name: Parse Snyk SARIF for Severity Breakdown
        id: parse_snyk
        run: |
          # Check if the SARIF file exists and is not empty before parsing
          if [! -s packages.sarif ]; then
            echo "SARIF file not found or is empty. Setting counts to 0."
            echo "CRITICAL_COUNT=0" >> $GITHUB_ENV
            echo "HIGH_COUNT=0" >> $GITHUB_ENV
            echo "MEDIUM_COUNT=0" >> $GITHUB_ENV
            echo "LOW_COUNT=0" >> $GITHUB_ENV
            echo "TOTAL_COUNT=0" >> $GITHUB_ENV
            exit 0
          fi
          
          # Corrected jq paths to handle the SARIF array structure:.runs.results
          # The '?' after results handles cases where the results array might be null or empty.
          CRITICAL=$(jq '[.runs.results? | select(.properties.severity == "critical")] | length' packages.sarif)
          HIGH=$(jq '[.runs.results? | select(.properties.severity == "high")] | length' packages.sarif)
          MEDIUM=$(jq '[.runs.results? | select(.properties.severity == "medium")] | length' packages.sarif)
          LOW=$(jq '[.runs.results? | select(.properties.severity == "low")] | length' packages.sarif)
          TOTAL=$((CRITICAL + HIGH + MEDIUM + LOW))

          echo "CRITICAL_COUNT=$CRITICAL" >> $GITHUB_ENV
          echo "HIGH_COUNT=$HIGH" >> $GITHUB_ENV
          echo "MEDIUM_COUNT=$MEDIUM" >> $GITHUB_ENV
          echo "LOW_COUNT=$LOW" >> $GITHUB_ENV
          echo "TOTAL_COUNT=$TOTAL" >> $GITHUB_ENV

      # Step 4: Send a rich, detailed notification to Microsoft Teams
      - name: Microsoft Teams Notification
        if: always()
        # This action is designed for rich, customizable cards
        uses: toko-bifrost/ms-teams-deploy-card@master
        with:
          webhook-uri: ${{ secrets.MSTEAMS_WEBHOOK_URI }}
          github-token: ${{ github.token }}
          # The 'status' field controls the card's title and color
          status: ${{ job.status == 'success' && env.TOTAL_COUNT == 0}}
          # The 'custom-facts' input allows for a detailed key-value breakdown
          custom-facts: |
            - name: Repository
              value: ${{ github.repository }}
            - name: Branch
              value: ${{ github.ref_name }}
            - name: Total Vulnerabilities
              value: ${{ env.TOTAL_COUNT }}
            - name: ðŸ”´ Critical
              value: ${{ env.CRITICAL_COUNT }}
            - name: ðŸŸ  High
              value: ${{ env.HIGH_COUNT }}
            - name: ðŸŸ¡ Medium
              value: ${{ env.MEDIUM_COUNT }}
            - name: ðŸ”µ Low
              value: ${{ env.LOW_COUNT }}
          # The 'custom-actions' input adds clickable buttons to the card
          custom-actions: |
            - text: View Workflow Run
              url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            - text: View Code Security Alerts
              url: ${{ github.server_url }}/${{ github.repository }}/security/code-scanning
      # - name: Total Security Issues
      #   run: |
      #        length=$(cat packages.sarif | jq '.runs[0].results | length')
      #        echo "RESULTS_LENGTH = $length" >> $GITHUB_ENV
      # - name: Microsoft Teams Notification
      #   if: always()
      #   # uses: skitionek/notify-microsoft-teams@v1.0.3
      #   uses: skitionek/notify-microsoft-teams@v1.0.9
      #   # uses: septblast/ms-teams-notification@v2.0.2
      #   # with:
      #   #       github-token: ${{ github.token }}
      #   #       ms-teams-webhook-uri: ${{ secrets.MSTEAMS_WEBHOOK_URL }}
      #   #       notification-summary: |
      #   #                             A Snyk scan has detected vulnerabilities.
      #   #                             **Repository:** ${{ github.repository }}
      #   #                             **Branch:** `${{ github.ref_name }}`
      #   #                             **Total Vulnerabilities Found:** **${{ env.RESULTS_LENGTH }}**

      #   #                             Please review the findings and take appropriate action.

      #   #                             [**View Full Workflow Run**](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
      #   #       notification-color: 17a2b8
      #   #       timezone: Asia/Kolkata
      #   # with:
      #   #   webhook_url: ${{ secrets.MSTEAMS_WEBHOOK_URL }}
      #   #   title: "Snyk Scan â€¢ ${{ github.repository }} â€” ${{ env.RESULTS_LENGTH }} issue(s)"
      #   #   summary: "Snyk found ${{ env.RESULTS_LENGTH }} issue(s) in ${{ github.repository }}"
      #   #   text: |
      #   #     A Snyk scan has detected vulnerabilities.

      #   #     **Repository:** ${{ github.repository }}
      #   #     **Branch:** `${{ github.ref_name }}`
      #   #     **Total Vulnerabilities Found:** **${{ env.RESULTS_LENGTH }}**

      #   #     Please review the findings and take appropriate action.

      #   #     [**View Full Workflow Run**](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
      #   with:
      #     webhook_url: ${{ secrets.MSTEAMS_WEBHOOK_URL }}
      #     # CRITICAL: This line injects the job context, resolving the error.
      #     job: ${{ toJson(job) }} 
      #     title: "Snyk Scan â€¢ ${{ github.repository }}"
      #     summary: "Snyk found ${{ env.RESULTS_LENGTH }} issue(s)"
      #     text: |
      #           A Snyk scan has completed.
      #           **Repository:** ${{ github.repository }}
      #           **Branch:** `${{ github.ref_name }}`
      #           **Total Vulnerabilities Found:** **${{ env.RESULTS_LENGTH }}**
      #           (${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
  code-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command : code test 
          args: --sarif-file-output=snyk-code.sarif
      - name: Print the snyk sarif file
        run: cat snyk-code.sarif 
    
      
