# # This is a GitHub Actions workflow file that integrates Snyk security scans.
# # It includes jobs for Snyk Code, Snyk Open Source, Snyk Container, and Snyk IaC.
# name: Snyk Security Scans

# # This workflow is triggered on every push to the main branch and on every pull request.
# on:
#   push:
#     branches: ["main"]
#   pull_request:
#     branches: ["main"]

# jobs:
#   # This job runs Snyk's Static Application Security Testing (SAST) to find and fix
#   # vulnerabilities in your application code.
#   snyk_code:
#     runs-on: ubuntu-latest
#     steps:
#       # This step checks out your repository's code so that the workflow can access it.
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       # This step installs the Snyk CLI into the runner environment.
#       - name: Set up Snyk CLI
#         uses: snyk/actions/setup@master

#       # This step runs the Snyk Code scan using the installed CLI.
#       - name: Run Snyk Code analysis
#         run: snyk code test
#         continue-on-error: true # To prevent the workflow from failing on vulnerabilities
#         env:
#           # Your Snyk token is required to authenticate with the Snyk API.
#           # Store your token as a secret in your GitHub repository settings.
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

#   # This job runs Snyk's Software Composition Analysis (SCA) to find and fix
#   # vulnerabilities in your open-source dependencies.
#   snyk_open_source:
#     runs-on: ubuntu-latest
#     steps:
#       # This step checks out your repository's code.
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       # This step sets up a Python environment.
#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.11'

#       # This step installs the project dependencies from your requirements.txt file.
#       - name: Install dependencies
#         run: pip install -r requirements.txt

#       # This step runs the Snyk Open Source scan using the dedicated Python action.
#       - name: Run Snyk Open Source
#         uses: snyk/actions/python@master
#         continue-on-error: true # To prevent the workflow from failing on vulnerabilities
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#         with:
#           # The 'test' command provides immediate feedback in the CI log.
#           command: test
#           args: --all-projects --sarif-file-output=snyk-open-source.sarif
      
#       - name: Monitor project on Snyk
#         uses: snyk/actions/python@master
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#         with:
#           # The 'monitor' command populates the Snyk dashboard.
#           command: monitor
#           args: --all-projects
  
#   # This job runs Snyk Container to find and fix vulnerabilities in your Docker image.
#   snyk_container:
#     runs-on: ubuntu-latest
#     steps:
#       # This step checks out your repository's code.
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       # This step builds the Docker image from the repository root.
#       - name: Build Docker image
#         run: docker build . --file ./dockerfiles/Dockerfile --tag fastapi-app

#       # This step runs the Snyk Container scan.
#       - name: Run Snyk Container scan
#         uses: snyk/actions/docker@master
#         continue-on-error: true # To prevent the workflow from failing on vulnerabilities
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#         with:
#           # The name of the image to test.
#           image: fastapi-app
#           # Arguments to pass to the Snyk CLI, pointing to the Dockerfile.
#           args: --file=./dockerfiles/Dockerfile

#   # This job runs Snyk Infrastructure as Code (IaC) to find and fix
#   # misconfigurations in your IaC files (e.g., Terraform, Kubernetes).
#   snyk_iac:
#     runs-on: ubuntu-latest
#     steps:
#       # This step checks out your repository's code.
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       # This step runs the Snyk IaC scan.
#       - name: Run Snyk IaC
#         uses: snyk/actions/iac@master
#         continue-on-error: true # To prevent the workflow from failing on vulnerabilities
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}


name: For Python using Snyk
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
jobs:

  package-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
            #command : code test 
            args: --sarif-file-output=packages.sarif
      
      - name: Count total number of vulnerabilities
        run: |
          RESULTS_LENGTH=$(jq '.runs[0].results | length' packages.sarif)
          echo "RESULTS_LENGTH=$RESULTS_LENGTH" >> $GITHUB_ENV
          echo $RESULTS_LENGTH

      - name: Notify Microsoft Teams
        if: always()
        uses: skitionek/notify-microsoft-teams@master
        continue-on-error: true
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK_URL }}
          raw: |
            {
              "type": "message",
              "attachments": [
                {
                  "contentType": "application/vnd.microsoft.card.adaptive",
                  "content": {
                    "type": "AdaptiveCard",
                    "version": "1.4",
                    "body": [
                      {
                        "type": "TextBlock",
                        "size": "Large",
                        "weight": "Bolder",
                        "text": "Snyk Scan Package Security Report"
                      },
                      {
                        "type": "TextBlock",
                        "text": "**Repo**: ${{ github.repository }}"
                      },
                      {
                        "type": "TextBlock",
                        "text": "**Status**: ${{ job.status }}"
                      },
                      {
                        "type": "TextBlock",
                        "text": "**Vulnerabilities**: ${{ env.RESULTS_LENGTH }}"
                      },
                      {
                        "type": "TextBlock",
                        "text": "[View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
                      }
                    ]
                  }
                }
              ]
            }
            
  code-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command : code test 
          args: --sarif-file-output=snyk-code.sarif
      - name: Print the snyk sarif file
        run: cat snyk-code.sarif 
        
  snyk_container:
    runs-on: ubuntu-latest
    steps:
      # This step checks out your repository's code.
      - name: Checkout repository
        uses: actions/checkout@v3

      # This step builds the Docker image from the repository root.
      - name: Build Docker image
        run: docker build . --file ./dockerfiles/Dockerfile --tag fastapi-app

      # This step runs the Snyk Container scan.
      - name: Run Snyk Container scan
        uses: snyk/actions/docker@master
        continue-on-error: true # To prevent the workflow from failing on vulnerabilities
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          # The name of the image to test.
          image: fastapi-app
          # Arguments to pass to the Snyk CLI, pointing to the Dockerfile.
          args: --file=./dockerfiles/Dockerfile

  # This job runs Snyk Infrastructure as Code (IaC) to find and fix
  # misconfigurations in your IaC files (e.g., Terraform, Kubernetes).
  snyk_iac:
    runs-on: ubuntu-latest
    steps:
      # This step checks out your repository's code.
      - name: Checkout repository
        uses: actions/checkout@v3

      # This step runs the Snyk IaC scan.
      - name: Run Snyk IaC
        uses: snyk/actions/iac@master
        continue-on-error: true # To prevent the workflow from failing on vulnerabilities
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  zap_scan:
    runs-on: ubuntu-latest
    name: Scan the web application
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.11.0
        continue-on-error: true
        with:
          target: 'https://coopapi.saivalentine.com/'
          cmd_options: '-a'
          
      - name: ZAP API Scan
        uses: zaproxy/action-api-scan@v0.7.0
        continue-on-error: true
        with:
          target: 'https://coopapi.saivalentine.com/apispec_1.json'


  sast:
    name: SAST (CodeQL)
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'python' # Set your project languages

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:python'
          
  secrets-scan:
    name: Secrets Scan (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: "--report-format sarif --report-path gitleaks.sarif"

      - name: Upload Gitleaks SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif


    
      
